/* @noflow */

import Task from '../'
import test from 'tape'

if (global.requestAnimationFrame) {
  test('test raf', test => {
    const onFail = error => {
      test.fail('Task.requestAnimationFrame never fails', error)
      test.end()
    }

    const onSucceed = value => {
      test.ok(value == null, 'Task.requestAnimationFrame succeeds with void')
      test.ok(Date.now() - start > 0, 'Task.requestAnimationFrame succeeds async')
      test.end()
    }

    Task
      .requestAnimationFrame()
      .fork(onSucceed, onFail)

    const start = Date.now()
  })

  test('test kill raf', test => {
    let isKilled = false
    const onFail = error => {
      test.fail('Task.requestAnimationFrame never fails', error)
      test.end()
    }

    const onSucceed = value => {
      test.fail('Task.requestAnimationFrame does not succeed if killed', value)
      test.end()
    }

    const onKillFail = error => {
      test.fail('Process.kill never fails', error)
    }

    const onKillSucceed = value => {
      isKilled = true
      test.ok(value == null, 'Process.kill succeeds with void')
    }

    Task
      .requestAnimationFrame()
      .fork(onSucceed, onFail)
      .kill()
      .fork(onKillSucceed, onKillFail)

    setTimeout(() => {
      test.ok(isKilled)
      test.end()
    }, 500)
  })
}
