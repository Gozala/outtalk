/* @flow */

export type Time = number
export type ThreadID = number

export type Then <x, a, b> =
  (input:a) =>
  Task<x, b>

export type To <a, b> =
  (input:a) =>
  b

export type Handle <x, y, a> =
  (input:x) =>
  Task<y, a>


export type Suspend <x, a> =
  (resume:(task:Task<x, a>) => void) =>
  void

export type End <x, a> =
  (result:Task<x,a>) => void



declare export class Task <x, a>
  { type: "Succeed" | "Fail" | "Async" | "Await" | "Chain" | "Capture"
  , chain <b> (then:Then<x, a, b>): Task<x, b>
  , map <b> (f:To<a, b>): Task<x, b>
  , capture <y> (handle:Handle<x, y, a>): Task<y, a>
  , format <y>(f:To<x, y>): Task<y, a>
  , spawn <never> (): Task<never, ThreadID>
  , fork (fail:(error:x) => void, succeed:(value:a) => void):void
  }


declare export function fork <x, a>
  ( task:Task<x,a>
  , failed:(error:x) => void
  , succeeded:(value:a) => void
  ):
  void

declare export function perform <x, a>
  (task:Task<x,a>):
  void


declare export function succeed <x, a>
  (value:a):
  Task<x, a>

declare export function fail <x, a>
  (error:x):
  Task<x, a>

declare export function act <x, a>
  (suspend:Suspend <x, a>):
  Task<x, a>

declare export function task <x, a>
  (fork:(fail:(error:x) => void, succeed:(value:a) => void) => void):
  Task<x, a>

declare export function future <x, a>
  (promise:() => Promise<a, x>):
  Task<x, a>

declare export function sleep <x>
  (time:number):
  Task<x, void>

declare export function spawn <x, y, a>
  (task:Task<x, a>):
  Task<y, ThreadID>


declare export function chain <error, from, to>
  ( task:Task<error, from>
  , then:Then<error, from, to>):
  Task<error,to>

declare export function capture <error, recovered, value>
  ( task:Task<error, value>
  , handle:Handle<error, recovered, value>
  ):
  Task<recovered, value>

declare export function map <error, from, to>
  ( f:(input:from) => to
  , task:Task<error, from>
  ):
  Task<error, to>

declare export function format <error, formatted, value>
  ( f:(input:error) => formatted
  , task:Task<error, value>
  ):
  Task<formatted, value>

declare export function map2 <x, a, b, c>
  ( make:(a:a, b:b) => c
  , a:Task<x,a>
  , b:Task<x,b>
  ):
  Task<x, c>
