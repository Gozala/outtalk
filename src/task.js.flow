/* @flow */

export type Time = number
export type ThreadID = number

export type Then <x, a, b> =
  (input:a) =>
  Task<x, b>

export type To <a, b> =
  (input:a) =>
  b

export type Handle <x, y, a> =
  (input:x) =>
  Task<y, a>

export type Execute <x, a> =
  ( fail:(error:x) => void
  , succeed:(value:a) => void
  ) => void

export type Suspend <x, a> =
  (resume:(task:Task<x, a>) => void) =>
  void



declare export class Task <x, a>
  { type: "Task"
  , chain <b> (then:Then<x, a, b>): Task<x, b>
  , map <b> (f:To<a, b>): Task<x, b>
  , capture <y> (handle:Handle<x, y, a>): Task<y, a>
  , format <y>(f:To<x, y>): Task<y, a>
  , spawn <never> (): Task<never, ThreadID>
  , fork (onFail:(error:x) => void, onSucceed:(value:a) => void):void
  }

declare export function isTask
  (value:any):
  boolean

declare export function fork <x, a>
  ( task:Task<x,a>
  , onFail:(error:x) => void
  , onSucceed:(value:a) => void
  ):
  void

declare export function perform <x, a>
  (task:Task<x, a>):
  void


declare export function succeed <x, a>
  (value:a):
  Task<x, a>

declare export function fail <x, a>
  (error:x):
  Task<x, a>

declare export function task <x, a>
  (execute:Execute<x, a>):
  Task<x, a>

declare export function sleep <x>
  (time:number):
  Task<x, void>

declare export function spawn <x, y, a>
  (task:Task<x, a>):
  Task<y, ThreadID>

declare export function sequence <x, a>
  (tasks:Array<Task<x, a>>):
  Task<x, Array<a>>

declare export function chain <error, from, to>
  ( task:Task<error, from>
  , then:Then<error, from, to>):
  Task<error,to>

declare export function capture <error, recovered, value>
  ( task:Task<error, value>
  , handle:Handle<error, recovered, value>
  ):
  Task<recovered, value>

declare export function map <error, from, to>
  ( f:To<from, to>
  , task:Task<error, from>
  ):
  Task<error, to>

declare export function format <error, formatted, value>
  ( f:To<error, formatted>
  , task:Task<error, value>
  ):
  Task<formatted, value>

declare export function map2 <error, a, b, value>
  ( combine:(a:a, b:b) => value
  , a:Task<error, a>
  , b:Task<error, b>
  ):
  Task<error, value>

declare export function map3 <error, a, b, c, value>
  ( combine:(a:a, b:b, c:c) => value
  , a:Task<error, a>
  , b:Task<error, b>
  , c:Task<error, c>
  ):
  Task<error, value>

declare export function map4 <error, a, b, c, d, value>
  ( combine:(a:a, b:b, c:c, d:d) => value
  , a:Task<error, a>
  , b:Task<error, b>
  , c:Task<error, c>
  , d:Task<error, d>
  ):
  Task<error, value>

declare export function map5 <error, a, b, c, d, e, value>
  ( combine:(a:a, b:b, c:c, d:d, e:e) => value
  , a:Task<error, a>
  , b:Task<error, b>
  , c:Task<error, c>
  , d:Task<error, d>
  , e:Task<error, e>
  ):
  Task<error, value>
